#include <core.p4>
#include <tna.p4>
#include "headers.p4"
#include "util.p4"
#include "parsers.p4"


symbolic rows;
symbolic cols;
symbolic hash;
assume(rows>=1);

struct metadata_t {
        bit<32> min;
        bit<hash>[rows] index;
        bit<32>[rows] count;
}


control SwitchIngress(inout header_t hdr,
                      inout metadata_t ig_md,
                      in ingress_intrinsic_metadata_t ig_intr_md,
                      in ingress_intrinsic_metadata_from_parser_t ig_prsr_md,
                      inout ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md,
                      inout ingress_intrinsic_metadata_for_tm_t ig_tm_md){

        Hash<bit<hash>>(HashAlgorithm_t.CRC32)[rows] hash_TCP;
        action calc_hash()[i] {
                ig_md.index[i]=hash_TCP[i].get({get_seed(),hdr.ipv4.src_addr,get_seed(),hdr.ipv4.dst_addr,get_seed(),hdr.tcp.src_port,get_seed(),hdr.tcp.dst_port});
        }


        Register<bit<32>,_>(cols)[rows] cms;
        RegisterAction<bit<32>,_,bit<32>>(cms[i]) inc_cms[i]={
                void apply(inout bit<32> val, out bit<32> rv){
                        val=val+1;
                        rv=val;
                }
        };
        action regexec_inc_cms()[i] {
                ig_md.count[i]=inc_cms[i].execute(ig_md.index[i]);
        }


        apply {
                ig_md.min=0xffffffff;
                for (i < rows) {
                        calc_hash()[i];
                }

                for (i < rows) {
                        regexec_inc_cms()[i];
                }

                for (i < rows) {
                        ig_md.min=min(ig_md.min,ig_md.count[i]);
                }

        }
}


Pipeline(SwitchIngressParser(),SwitchIngress(),SwitchIngressDeparser(),EmptyEgressParser(),EmptyEgress(),EmptyEgressDeparser())pipe;
Switch(pipe)main;




minimize cms_util {
	function: 3/cols;
	step: 32000;
}


