/* With this implementation, it won't matter if we have multiple arrays in the same stage. Those can run in parallel because we're not comparing values to find a global min until the end, after we've already done all the hashing. */

/* ethernet, ipv4 headers, parsing, routing functions */

/* assume statements should be the minimum value we are willing to accept
   i.e., minimum width/depth to get some accuracy */
symbolic int rows;
assume(rows>2);
symbolic int depth;
assume();

salts = [1,2]

#include <core.p4>
#include <v1model.p4>

typedef bit<32> ip4Addr_t;


header ipv4_t {
    bit<4>    version;
    bit<4>    ihl;
    bit<8>    diffserv;
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}


struct custom_metadata_t {
	bit<32> count_min;
	bit<32>[rows] index;
	bit<32>[rows] count;	
}


struct headers {
    ipv4_t       ipv4;
}


#define HASH_BASE 10w0
#define HASH_MAX 10w1023

/* for simplicity, we don't include tables and apply actions directly in control */
control MyIngress(inout headers hdr,
                  inout custom_metadata_t meta,
                  inout standard_metadata_t standard_metadata) {


	register<bit<32>>(depth)[rows] counters;

	action count()[int i] {
        	/* compute hash index */
        	hash(meta.index[i], HashAlgorithm.crc16, HASH_BASE,
                      {hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, salts[i]}, HASH_MAX);

        	/* increment counter  - read, increment, write*/
		counters[i].read(tmp_count, meta.index[i]);
		meta.current_count[i] = meta.current_count[i] + 1;
		counters[i].write(meta.index[i], meta.current_count[i]);
	}

	action set_min()[int i]{
		meta.count_min = meta.current_count[i];
	}

	apply {
		for (i < rows) {
			count()[i];
		}

	
    		// finding min - conditions
    		for (i < rows) {
			if (meta.current_count[i] < meta.count_min) {
	    			set_min()[i];
			}
    		}
	}

    	/* apply forwarding logic */
}

minimize cms_util {
	function:
		switch cols {
			case 0 {
				scale(1)
			}
			default {
				scale(float(3)/float(cols))
			}
		};
	step: 2;
}


