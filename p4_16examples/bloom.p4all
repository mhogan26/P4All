/* ethernet, ipv4 headers, parsing, routing functions */

/* this is a membership bloom filter */
/* this DOES NOT include any querying logic; it only updates the filter */
/* it is trivial to add the querying functions - similar to CMS */


/* this is one of many ways to write a bloom filter */
/* this implementation requires each hash function to be in the same stage - bc they access the same reg array */
/* the programmer could have separate reg arrays (of equal sizes) for each hash function to avoid this */

#include "core.p4"
#include "v1model.p4"


symbolic int bits;
symbolic int hashes [1..10];

typedef bit<32> ip4Addr_t;

header ipv4_t {
    bit<4>    version;
    bit<4>    ihl;
    bit<8>    diffserv;
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}

struct headers { 
    ipv4_t       ipv4;
}

struct bloom_meta_t {
	bit<32> index;
        bit<1> member;
}

struct custom_metadata_t {
	bloom_meta_t[hashes] bloom_meta;
}


#define HASH_BASE 10w0
#define HASH_MAX 10w1023

control MyIngress(inout headers hdr,
                  inout custom_metadata_t meta,
                  inout standard_metadata_t standard_metadata) {

        register<bit<1>>(bits)[hashes] bloom_arrays;

	// we'd need to populate this with values, leaving empty for now
	salts = [];

	action hash()[int i] {
		/* compute hash index */
		hash(meta.bloom_meta[i].index, HashAlgorithm.crc16, HASH_BASE,
			{hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, salts[i]}, HASH_MAX);

		/* set bit to 1 */
		bloom_arrays[i].read(meta.bloom_meta[i].member, meta.bloom_meta[i].index);
		meta.bloom_meta[i].member = 1;
		bloom_arrays[i].write(meta.bloom_meta[i].index, meta.bloom_meta[i].member);
	}

	apply {
		for (i < hashes) {
			hash()[i];
		}
	}

        /* apply forwarding logic */

}


minimize bloom_util {
	switch bits{
		case 0 {
			scale(1)
		}
		default {
			(1 - math.exp(-float(hashes)*float(100)/float(bits)))**float(hashes)
		}
	}
	step 10
}

optimize bloom_util;

