/* this does NOT include any forwarding logic, nor any logic to query the data structures */

#include "core.p4"
#include "v1model.p4"

symbolic int KVS_ITEMS;


/* kvs utility -- sum from 1 to KVS_ITEMS of 1/x^alpha, where alpha is workload-dependent parameter describing distribution (in this case, alpha = 1) */

typedef bit<32> ip4Addr_t;

header ipv4_t {
    bit<4>    version;
    bit<4>    ihl;
    bit<8>    diffserv;
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}

header kvs_value_t {
    bit<32>   cache_index;
    bit<32>   value;
}


struct headers {
    ipv4_t       ipv4;
    kvs_value_t   kvs_value;
}


parser MyParser(packet_in packet,
                out headers hdr,
                inout custom_metadata_t meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ipv4;
    }
    state parse_ipv4 {
        packet.extract(hdr.ipv4);
	transition parse_value;
    }
    state parse_value {
	packet.extract(hdr.kvs_value);
	transition accept;
    }

}


#define HASH_BASE 10w0
#define HASH_MAX 10w1023

control MyEgress(inout headers hdr, inout custom_metadata_t meta, inout standard_metadata_t standard_metadata) {


   /* KEY VALUE STORE */
   register<bit<32>>(KVS_ITEMS)  key_value_regs;

   action remove_value_header() {
        hdr.ipv4.totalLen = hdr.ipv4.totalLen - 16;
	hdr.kvs_value.setInvalid();
   }

   action write_kvs() {
	 /* write header value into kvs */
         key_value_regs.write(hdr.kvs_value.cache_index, hdr.kvs_value.value);
   }

    apply {
	/* KVS */
	write_kvs();
        remove_value_header();

    }
}


maximize kvs_util {
	switch kv_items {
		case 0 {
			scale(-1)
		}
		default {
			scale(sum(1,kv_items,1/x))
		}
	}
	step 10;

}

optimize kvs_util;


