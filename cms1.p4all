/* With this implementation, it won't matter if we have multiple arrays in the same stage. Those can run in parallel because we're not comparing values to find a global min until the end, after we've already done all the hashing. */

/* ethernet, ipv4 headers, parsing, routing functions */

/* assume statements should be the minimum value we are willing to accept
   i.e., minimum width/depth to get some accuracy */
symbolic int N;
assume();
symbolic int depth;
assume();


#include <core.p4>
#include <v1model.p4>

typedef bit<32> ip4Addr_t;


header ipv4_t {
    bit<4>    version;
    bit<4>    ihl;
    bit<8>    diffserv;
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}


struct cms_meta {
	bit<32> index;
        bit<32> current_count;
}

struct custom_metadata_t {
        bit<32> count_min;
	// same syntax as header stack
	cms_meta[N] cms_meta1;
}


struct headers {
    ipv4_t       ipv4;
}


#define HASH_BASE 10w0
#define HASH_MAX 10w1023

/* for simplicity, we don't include tables and apply actions directly in control */
control MyIngress(inout headers hdr,
                  inout custom_metadata_t meta,
                  inout standard_metadata_t standard_metadata) {


	salts = []	// how to populate this? don't know how many you'll end up needing - could just put max number of values in here? and maybe trim based on how many you actually use?

	register<bit<32>>(depth) counter;
	counter[N] counters;

	bit<32> tmp_count;

	action count(int i) {
        	/* compute hash index */
        	hash(meta.cms_meta1[i].index, HashAlgorithm.crc16, HASH_BASE,
                      {hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, salts[i]}, HASH_MAX);

        	/* increment counter  - read, increment, write*/
		counters[i].read(tmp_count, meta.cms_meta1[i].index);
		meta.cms_meta1[i].current_count = tmp_count + 1;
		counters[i].write(meta.cms_meta1[i].index, meta.cms_meta1[i].current_count);
	}

	action set_min(int i){
		meta.count_min = meta.cms_meta1[i].current_count;
	}

	apply {
		for (i = 0; i < N; i++) {
			count(i);
		}

    		// finding min - conditions
    		// first stage is always the same - put 1st count as min
    		set_min(0);
    		for (i = 1; i < N; i++) {
			if (meta.cms_meta1[i].current_count < meta.count_min) {
	    			set_min(i);
			}
    		}
	}

    	/* apply forwarding logic */
}


