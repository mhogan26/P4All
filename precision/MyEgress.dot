digraph MyEgress {
subgraph cluster {
graph [
label="", labeljust=r, style=bold];
0[label=__START__, margin="", shape=rectangle, style=solid];
1[label=__EXIT__, margin="", shape=rectangle, style=solid];
2[label="commpute_flow_id();
...
meta.my_estimated_count = 0;", margin="", shape=rectangle, style=solid];
3[label="standard_metadata.instance_type == 0;", margin="", shape=rectangle, style=solid];
4[label="flow_table_id/flow_table_id_1.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s1);
flow_table_ctr/flow_table_ctr_1.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s1);", margin="", shape=rectangle, style=solid];
5[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
6[label="flow_table_id/flow_table_id_1.write(meta.hashed_address_s1, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
7[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 1;", margin="", shape=rectangle, style=solid];
8[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
9[label="flow_table_id_0/flow_table_id_2.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s2);
flow_table_ctr_0/flow_table_ctr_2.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s2);", margin="", shape=rectangle, style=solid];
10[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
11[label="flow_table_id_0/flow_table_id_2.write(meta.hashed_address_s2, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
12[label="meta.carry_min > tmp_existing_flow_count_0/tmp_existing_flow_count;", margin="", shape=rectangle, style=solid];
13[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 2;", margin="", shape=rectangle, style=solid];
14[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
15[label="flow_table_id_11/flow_table_id_3.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s3);
flow_table_ctr_11/flow_table_ctr_3.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s3);", margin="", shape=rectangle, style=solid];
16[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
17[label="flow_table_id_11/flow_table_id_3.write(meta.hashed_address_s3, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
18[label="meta.carry_min > tmp_existing_flow_count_0/tmp_existing_flow_count;", margin="", shape=rectangle, style=solid];
19[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 3;", margin="", shape=rectangle, style=solid];
20[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
21[label="flow_table_id_12/flow_table_id_4.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s4);
flow_table_ctr_12/flow_table_ctr_4.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s4);", margin="", shape=rectangle, style=solid];
22[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
23[label="flow_table_id_12/flow_table_id_4.write(meta.hashed_address_s4, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
24[label="meta.carry_min > tmp_existing_flow_count_0/tmp_existing_flow_count;", margin="", shape=rectangle, style=solid];
25[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 4;", margin="", shape=rectangle, style=solid];
26[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
27[label="flow_table_id_13/flow_table_id_5.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s5);
flow_table_ctr_13/flow_table_ctr_5.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s5);", margin="", shape=rectangle, style=solid];
28[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
29[label="flow_table_id_13/flow_table_id_5.write(meta.hashed_address_s5, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
30[label="meta.carry_min > tmp_existing_flow_count_0/tmp_existing_flow_count;", margin="", shape=rectangle, style=solid];
31[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 5;", margin="", shape=rectangle, style=solid];
32[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
33[label="flow_table_id_14/flow_table_id_6.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s6);
flow_table_ctr_14/flow_table_ctr_6.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s6);", margin="", shape=rectangle, style=solid];
34[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
35[label="flow_table_id_14/flow_table_id_6.write(meta.hashed_address_s6, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
36[label="meta.carry_min > tmp_existing_flow_count_0/tmp_existing_flow_count;", margin="", shape=rectangle, style=solid];
37[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 6;", margin="", shape=rectangle, style=solid];
38[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
39[label="flow_table_id_15/flow_table_id_7.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s7);
flow_table_ctr_15/flow_table_ctr_7.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s7);", margin="", shape=rectangle, style=solid];
40[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
41[label="flow_table_id_15/flow_table_id_7.write(meta.hashed_address_s7, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
42[label="meta.carry_min > tmp_existing_flow_count_0/tmp_existing_flow_count;", margin="", shape=rectangle, style=solid];
43[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 7;", margin="", shape=rectangle, style=solid];
44[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
45[label="flow_table_id_16/flow_table_id_8.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s8);
flow_table_ctr_16/flow_table_ctr_8.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s8);", margin="", shape=rectangle, style=solid];
46[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
47[label="flow_table_id_16/flow_table_id_8.write(meta.hashed_address_s8, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
48[label="meta.carry_min > tmp_existing_flow_count_0/tmp_existing_flow_count;", margin="", shape=rectangle, style=solid];
49[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 8;", margin="", shape=rectangle, style=solid];
50[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
51[label="flow_table_id_17/flow_table_id_9.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s9);
flow_table_ctr_17/flow_table_ctr_9.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s9);", margin="", shape=rectangle, style=solid];
52[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
53[label="flow_table_id_17/flow_table_id_9.write(meta.hashed_address_s9, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
54[label="meta.carry_min > tmp_existing_flow_count_0/tmp_existing_flow_count;", margin="", shape=rectangle, style=solid];
55[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 9;", margin="", shape=rectangle, style=solid];
56[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
57[label="flow_table_id_18/flow_table_id_10.read(tmp_existing_flow_id_0/tmp_existing_flow_id, meta.hashed_address_s10);
flow_table_ctr_18/flow_table_ctr_10.read(tmp_existing_flow_count_0/tmp_existing_flow_count, meta.hashed_address_s10);", margin="", shape=rectangle, style=solid];
58[label="tmp_existing_flow_count_0/tmp_existing_flow_count == 0 || tmp_existing_flow_id_0/tmp_existing_flow_id == meta.my_flowID;", margin="", shape=rectangle, style=solid];
59[label="flow_table_id_18/flow_table_id_10.write(meta.hashed_address_s10, meta.my_flowID);
...
meta.already_matched = 1;", margin="", shape=rectangle, style=solid];
60[label="meta.carry_min > tmp_existing_flow_count_0/tmp_existing_flow_count;", margin="", shape=rectangle, style=solid];
61[label="meta.carry_min = tmp_existing_flow_count_0/tmp_existing_flow_count;
meta.min_stage = 10;", margin="", shape=rectangle, style=solid];
62[label="meta.already_matched == 0;", margin="", shape=rectangle, style=solid];
63[label="random<bit<64>>(meta.random_bits, 0, 18446744073709551615);
...
meta.carry_min_plus_one = meta.carry_min + 1;", margin="", shape=rectangle, style=solid];
64[label="MyEgress.better_approximation", margin="", shape=ellipse, style=solid];
65[label="mark_to_drop();", margin="", shape=rectangle, style=solid];
66[label="meta.min_stage == 1;", margin="", shape=rectangle, style=solid];
67[label="flow_table_id/flow_table_id_1.write(meta.hashed_address_s1, meta.my_flowID);
flow_table_ctr/flow_table_ctr_1.write(meta.hashed_address_s1, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
68[label="meta.min_stage == 2;", margin="", shape=rectangle, style=solid];
69[label="flow_table_id_0/flow_table_id_2.write(meta.hashed_address_s2, meta.my_flowID);
flow_table_ctr_0/flow_table_ctr_2.write(meta.hashed_address_s2, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
70[label="meta.min_stage == 3;", margin="", shape=rectangle, style=solid];
71[label="flow_table_id_11/flow_table_id_3.write(meta.hashed_address_s3, meta.my_flowID);
flow_table_ctr_11/flow_table_ctr_3.write(meta.hashed_address_s3, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
72[label="meta.min_stage == 4;", margin="", shape=rectangle, style=solid];
73[label="flow_table_id_12/flow_table_id_4.write(meta.hashed_address_s4, meta.my_flowID);
flow_table_ctr_12/flow_table_ctr_4.write(meta.hashed_address_s4, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
74[label="meta.min_stage == 5;", margin="", shape=rectangle, style=solid];
75[label="flow_table_id_13/flow_table_id_5.write(meta.hashed_address_s5, meta.my_flowID);
flow_table_ctr_13/flow_table_ctr_5.write(meta.hashed_address_s5, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
76[label="meta.min_stage == 6;", margin="", shape=rectangle, style=solid];
77[label="flow_table_id_14/flow_table_id_6.write(meta.hashed_address_s6, meta.my_flowID);
flow_table_ctr_14/flow_table_ctr_6.write(meta.hashed_address_s6, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
78[label="meta.min_stage == 7;", margin="", shape=rectangle, style=solid];
79[label="flow_table_id_15/flow_table_id_7.write(meta.hashed_address_s7, meta.my_flowID);
flow_table_ctr_15/flow_table_ctr_7.write(meta.hashed_address_s7, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
80[label="meta.min_stage == 8;", margin="", shape=rectangle, style=solid];
81[label="flow_table_id_16/flow_table_id_8.write(meta.hashed_address_s8, meta.my_flowID);
flow_table_ctr_16/flow_table_ctr_8.write(meta.hashed_address_s8, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
82[label="meta.min_stage == 9;", margin="", shape=rectangle, style=solid];
83[label="flow_table_id_17/flow_table_id_9.write(meta.hashed_address_s9, meta.my_flowID);
flow_table_ctr_17/flow_table_ctr_9.write(meta.hashed_address_s9, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
84[label="meta.min_stage == 10;", margin="", shape=rectangle, style=solid];
85[label="flow_table_id_18/flow_table_id_10.write(meta.hashed_address_s10, meta.my_flowID);
flow_table_ctr_18/flow_table_ctr_10.write(meta.hashed_address_s10, meta.carry_min + 1);", margin="", shape=rectangle, style=solid];
86[label="hdr.ethernet.dstAddr = 281474976710655;
hdr.ethernet.srcAddr = meta.my_estimated_count[47:0];", margin="", shape=rectangle, style=solid];
0 -> 2[label=""];
2 -> 3[label=""];
3 -> 4[label=TRUE];
3 -> 65[label=FALSE];
4 -> 5[label=""];
5 -> 6[label=TRUE];
5 -> 7[label=FALSE];
6 -> 8[label=""];
7 -> 8[label=""];
8 -> 9[label=TRUE];
8 -> 14[label=FALSE];
9 -> 10[label=""];
10 -> 11[label=TRUE];
10 -> 12[label=FALSE];
11 -> 14[label=""];
12 -> 13[label=TRUE];
12 -> 14[label=FALSE];
13 -> 14[label=""];
14 -> 15[label=TRUE];
14 -> 20[label=FALSE];
15 -> 16[label=""];
16 -> 17[label=TRUE];
16 -> 18[label=FALSE];
17 -> 20[label=""];
18 -> 19[label=TRUE];
18 -> 20[label=FALSE];
19 -> 20[label=""];
20 -> 21[label=TRUE];
20 -> 26[label=FALSE];
21 -> 22[label=""];
22 -> 23[label=TRUE];
22 -> 24[label=FALSE];
23 -> 26[label=""];
24 -> 25[label=TRUE];
24 -> 26[label=FALSE];
25 -> 26[label=""];
26 -> 27[label=TRUE];
26 -> 32[label=FALSE];
27 -> 28[label=""];
28 -> 29[label=TRUE];
28 -> 30[label=FALSE];
29 -> 32[label=""];
30 -> 31[label=TRUE];
30 -> 32[label=FALSE];
31 -> 32[label=""];
32 -> 33[label=TRUE];
32 -> 38[label=FALSE];
33 -> 34[label=""];
34 -> 35[label=TRUE];
34 -> 36[label=FALSE];
35 -> 38[label=""];
36 -> 37[label=TRUE];
36 -> 38[label=FALSE];
37 -> 38[label=""];
38 -> 39[label=TRUE];
38 -> 44[label=FALSE];
39 -> 40[label=""];
40 -> 41[label=TRUE];
40 -> 42[label=FALSE];
41 -> 44[label=""];
42 -> 43[label=TRUE];
42 -> 44[label=FALSE];
43 -> 44[label=""];
44 -> 45[label=TRUE];
44 -> 50[label=FALSE];
45 -> 46[label=""];
46 -> 47[label=TRUE];
46 -> 48[label=FALSE];
47 -> 50[label=""];
48 -> 49[label=TRUE];
48 -> 50[label=FALSE];
49 -> 50[label=""];
50 -> 51[label=TRUE];
50 -> 56[label=FALSE];
51 -> 52[label=""];
52 -> 53[label=TRUE];
52 -> 54[label=FALSE];
53 -> 56[label=""];
54 -> 55[label=TRUE];
54 -> 56[label=FALSE];
55 -> 56[label=""];
56 -> 57[label=TRUE];
56 -> 62[label=FALSE];
57 -> 58[label=""];
58 -> 59[label=TRUE];
58 -> 60[label=FALSE];
59 -> 62[label=""];
60 -> 61[label=TRUE];
60 -> 62[label=FALSE];
61 -> 62[label=""];
62 -> 63[label=TRUE];
62 -> 86[label=FALSE];
63 -> 64[label=""];
64 -> 86[label=""];
65 -> 66[label=""];
66 -> 67[label=TRUE];
66 -> 68[label=FALSE];
67 -> 68[label=""];
68 -> 69[label=TRUE];
68 -> 70[label=FALSE];
69 -> 70[label=""];
70 -> 71[label=TRUE];
70 -> 72[label=FALSE];
71 -> 72[label=""];
72 -> 73[label=TRUE];
72 -> 74[label=FALSE];
73 -> 74[label=""];
74 -> 75[label=TRUE];
74 -> 76[label=FALSE];
75 -> 76[label=""];
76 -> 77[label=TRUE];
76 -> 78[label=FALSE];
77 -> 78[label=""];
78 -> 79[label=TRUE];
78 -> 80[label=FALSE];
79 -> 80[label=""];
80 -> 81[label=TRUE];
80 -> 82[label=FALSE];
81 -> 82[label=""];
82 -> 83[label=TRUE];
82 -> 84[label=FALSE];
83 -> 84[label=""];
84 -> 85[label=TRUE];
84 -> 86[label=FALSE];
85 -> 86[label=""];
86 -> 1[label=""];
}
}
