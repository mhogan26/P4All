/* simple symbolic cms */

// symbolics
symbolic int cols;
symbolic size rows; 
symbolic size logcols;

// hash polynomials (we're skipping 1 bc it's identity)
//const int[rows] polynomials = [size_to_int(i)+2 for i<rows];

// threshold for hh
const int thresh = 100;

// cms structure (keeping reg width fixed for now)
global Array.t<<32>>[rows] cms = [Array.create(cols) for i<rows];


/* Events */
// pkt in switch
entry event ip_in (int<<9>> igr_port, int src, int dst);
// end of lucid program, send back to switch
exit event ip_out (int<<9>> egr_port, int src, int dst, int<<1>> hh);


/* Externs */
extern update_count(int x, int y, int z);

/* Memops */
memop incr(int memval, int incrval) {
	return memval + incrval;
}

memop compute_min(int memval, int minval) {
	if (memval + 1 < minval) {
		return memval+1;
	} else {
		return minval;
	}
}

/* Handlers */
handle ip_in (int<<9>> igr_port, int src, int dst) {
	/* actual cms */
	// init values
	int min = 0xffffffff;
	int<<1>> hh = 0;

	for (i < rows) {
		// get index
		// log2 --> we don't know how many spaces we're hashing to, so we don't know how many bits to use for index
		// using log2 as a placeholder for now
		int<<logcols>> idx = hash<<logcols>>(size_to_int(i),src,dst);
		// incr value and calc min as we go
		// NOTE: use memop for min calc bc it only needs 1 stage (uses stateful alu)
		// if we use a conditional to compare, it breaks up the comparison and takes mult stages
		min = Array.update(cms[i], idx, compute_min, min, incr, 1);
	}

	/* 
	if (min > thresh) {
		// report to controller or mark packet as heavy hitter or something
		// what we do here will likely be application dependent, but for this example we're marking the packet
		// for simplicity, assume we report every time we get count > thresh
		// in reality, we might want to probabilistically report, or limit the number of times we report a flow (e.g., bloom filter to keep track of if we've already reported)
		hh = 1;
	}
	*/

	/* measurement stuff */
	// we're keeping track of (min) counts from the sketch in python code
	// python function call here to update the count for a specific flow
	// we could also keep track of what gets reported as heavy hitter by returning hh instead of min
	//m.update_count(min, [src; dst]);
	update_count(src, dst, min);

	generate ip_out(igr_port, src, dst, hh);
}
