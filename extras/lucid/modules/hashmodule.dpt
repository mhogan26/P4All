/* single stage hash table */
// for set membership - 1 or 0 - or counting
// same interface as bloom

// when add to struct --> check if key the same
// if same --> incr/set to 1
// else --> replace key, set = 1
// when check --> check if key the same
// if same --> return bool val or count
// else --> return false or 0

// we're hardcoding hash seed to 1 for now

memop incr(int<<'a>> x, int<<'a>> y) {
  return x + 1;
}

memop keyupdate(int<<'a>> memval, int<<'a>> keyval) {
    return keyval;
}

memop keycheck(int<<'a>> memval, int<<'a>> newval) {
    if (memval==newval) {
        return 1;
    } else {
        return 0;
    }
}

module HashTable : {
    global type t<<'idx_sz, 'k, 'a>>;
    constr t<<'idx_sz, 'k, 'a>> create(int m, int['k] seeds, bool c, int threshold);

    // funs to match bloom and cms
    fun void add_to_struct_count(t<<'idx_sz, 'k, 'a>> struct, int<<'a>> key) [start <= struct; end struct];
    fun void add_to_struct_membership(t<<'idx_sz, 'k, 'a>> struct, int<<'a>> key) [start <= struct; end struct];
    fun int<<'a>> check_count(t<<'idx_sz, 'k, 'a>> struct, int<<'a>> key) [start <= struct; end struct];
    fun bool check_membership(t<<'idx_sz, 'k, 'a>> struct, int<<'a>> key) [start <= struct; end struct];
    fun void reset_index(t<<'idx_sz, 'k, 'a>> struct, int<<'idx_sz>> idx) [start <= struct; end struct];
} {
    type t<<'idx_sz, 'k, 'a>> = {
        Array.t<<'a>> keys;
        Array.t<<'a>> vals;
	int['k] hash_seeds;
        int<<'idx_sz>> m;
        bool counting;
        int thresh;
    }

    constr t<<'idx_sz, 'k, 'a>> create(int m, int['k] seeds, bool c, int threshold) = {
	keys = Array.create(m);
	vals = Array.create(m);
	hash_seeds = seeds;
        m = (int<<'idx_sz>>) m;
        counting = c;
        thresh = threshold;
    };

    fun void add_to_struct_count(t<<'idx_sz, 'k, 'a>> struct, int<<'a>> key) {
	// check key (always evict/replace)
	int<<1>> kcheck = (int<<1>>)Array.update(struct#keys, hash<<'idx_sz>>(1,key), keycheck, key, keyupdate, key);
	// if key matches
	if (kcheck==1) {
		Array.setm(struct#vals, hash<<'idx_sz>>(1,key), incr, 1);
	} else {
		Array.set(struct#vals, hash<<'idx_sz>>(1,key), 1);
	}
    }

    fun void add_to_struct_membership(t<<'idx_sz, 'k, 'a>> struct, int<<'a>> key) {
        // check key (always evict/replace)
        int<<1>> kcheck = (int<<1>>)Array.update(struct#keys, hash<<'idx_sz>>(1,key), keycheck, key, keyupdate, key);
        Array.set(struct#vals, hash<<'idx_sz>>(1,key), 1);
    }

    fun int<<'a>> check_count(t<<'idx_sz, 'k, 'a>> struct, int<<'a>> key) {
	// check key (don't evict when querying)
	int<<1>> kcheck = (int<<1>>)Array.getm(struct#keys, hash<<'idx_sz>>(1,key), keycheck, key);
	// if key matches
	if (kcheck==1) {
		int<<'a>> x = Array.get(struct#vals, hash<<'idx_sz>>(1,key));
		return x;
	} 
	else {	// always return if item not in table
		return 0;
	}
    }

    fun bool check_membership(t<<'idx_sz, 'k, 'a>> struct, int<<'a>> key) {
        // check key (don't evict when querying)
        int<<1>> kcheck = (int<<1>>)Array.getm(struct#keys, hash<<'idx_sz>>(1,key), keycheck, key);
        // if key matches
        if (kcheck==1) {
                int<<'a>> x = Array.get(struct#vals, hash<<'idx_sz>>(1,key));
                return x==1;
        } else {        // always return false if item not in table
                return false;
        }
    }

    fun void reset_index(t<<'idx_sz, 'k, 'a>> struct, int<<'idx_sz>> idx) {
        // reset key??
        Array.set(struct#keys, idx, 0);
        Array.set(struct#vals, idx, 0);
    }
}



global HashTable.t<<7, 1, 32>> ht = HashTable.create(128, [size_to_int(i) for i < 1], false, 0);
entry event test (int src, int dst);
exit event test_ex (bool mem);

handle test (int src, int dst) {
    bool mem = false;
    //HashTable.reset_index(ht, 0);
    //HashTable.check_membership(ht,21); 
    //HashTable.add_to_struct_membership(ht, 21);
    //HashTable.add_to_struct_count(ht,src);
    generate test_ex(mem);

}





