/* cms module that checks if value below threshold */

memop incr(int<<'a>> x, int<<'b>> y) {
  return x + 1;
}

memop min(int<<'a>> x, int<<'b>> y) {
    if (x < y) {
        return x;
    } else {
        return y;
    }
}

module Cms : {
    global type t<<'idx_sz, 'k, 'a>>;
    constr t<<'idx_sz, 'k, 'a>> create(int m, int['k] seeds, int threshold);
    
    fun void add_to_struct_count(t<<'idx_sz, 'k, 'a>> struct, 'any key) [start <= struct; end struct];
    fun bool check_thresh(t<<'idx_sz, 'k, 'a>> struct, 'any key) [start <= struct; end struct];
    fun void reset_index(t<<'idx_sz, 'k, 'a>> struct, int<<'idx_sz>> idx) [start <= struct; end struct];

} {

    type t<<'idx_sz, 'k>> = {
        Array.t<<'a>>['k] arrs;
        int['k] hash_seeds;
        int<<'idx_sz>> m;
        int thresh;
    }


    constr t<<'idx_sz, 'k, 'a>> create(int m, int['k] seeds) = {
        arrs = [Array.create(m) for i < 'k];
        hash_seeds = seeds;
        m = (int<<'idx_sz>>) m;
        thresh = threshold
    };


    fun void add_to_struct_count(t<<'idx_sz, 'k, 'a>> struct, 'any key) {
        for (i < 'k) {
            Array.setm(struct#arrs[i], hash<<'idx_sz>>(struct#hash_seeds[i], key), incr, 1);
        }
    }

    fun bool check_thresh(t<<'idx_sz, 'k, 'a>> struct, 'any key) {
        int<<'a>> best = 0;
        for (i < 'k) {
            if (size_to_int(i)==0) {
                best = Array.get(struct#arrs[i], hash<<'idx_sz>>(struct#hash_seeds[i], key));
            } else {
                int<<'a>> x = Array.getm(struct#arrs[i], hash<<'idx_sz>>(struct#hash_seeds[i], key), min, best);
            }
        }
        return best < thresh;
    }

    fun void reset_index(t<<'idx_sz, 'k, 'a>> struct, int<<'idx_sz>> idx) {
        for (i < 'k) {
            Array.set(struct#arrs[i], idx, 0);
        }
    }


}
